render pass
    A render pass consists of two types of componenets
        - attachments
            - color attachment
            - depth attachment
            - resolve attachment
            - input attachment
            - preserve attachment
        - subpasses

    command buffer
        -> vkcmd, begin render pass
        -> pass in the framebuffer


Framebuffers
    --> https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/03_Drawing/00_Framebuffers.html

    - framebuffer is expected to be the same as the swapchain's image format
    - the render pass bounds with a VkFramebuffer object, this in turn references
      image views objects
    - The VkFramebuffer object depends on the type of image retrieved from the
      swapchain, meaning that we have to create a framebuffer depending on the
      retreived image, we need to cover all cases
    - jjjj
      

Framebuffer vs Render pass
    The Render pass is a blueprint or template
    It defines how the attachments will be used during the render process
    But it does this independent of the actual images, the structure that holds the
    actual images (Image Views) is the Framebuffer

    The render pass is the recipe
    The framebuffer are the actual ingredients

    This lets you use the same render pass with different attachments (framebuffers)

Render pass
    --> https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/02_Graphics_pipeline_basics/03_Render_passes.html
    How many color and depth buffers
    How many samples to use per each one
    We should be matching the format of the swapchain
    
    Subpasses and attachment references
    A single render pass consists of multiple subpasses
    They are subsequent rendering operations that depend on the contents of the framebuffers
    in previous stages
    If we bundle a bunch of operations (subpasses) in a single render pass, vulkan is then
    able to re-order them and optimize them

    Elements
        A render pass consists of the following
            - multiple subpasses
                - attachments



framebuffers
    --> https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/03_Drawing/00_Framebuffers.html
    It encapsules ALL image views that represent the attachments
    We retrieve an image from the swapchain, we have to match the type of such image
    with the type of the framebuffer used to wrap it

    The render pass expects a single framebuffer with the same format as the swapchain's 

    We first create the render pass then we create the framebuffer

    compatiblity with a render pass
        roughly this means that the framebuffer uses the same number of types and attachments

    render pass compatibility with swapchain
        If the render passes are compatible with the pipeline, then
        we only need to start a render pass and bind it to the same pipeline to
        trigger this mechanism

Why render passes define scope of operations and not the Pipeline themselves
    Pipelines don't define when attachments (framebuffers) will start or finish being used
    This is purely the render pass' responsability
    So when we do a BeginRenderPass, we are effectively saying, Pipeline, you may begin using
    the attachments

    Beginning a render pass will allow you to bind the pipeline with the render pass

To begin a renderpass we need:
    - the render pass
    - the framebuffer
    - the command buffer
    - (The swapchain indirectly)

To bind a pipeline we need:
    - the command buffer
    - the pipeline

Binding a pipeline means binding it to an specific command buffer
Binding a pipeline makes subsequent commands interact with it, say drawing and so on...
There is not an strict operation or function to bind a pipeline with a given renderpass per-se

When invoking 'drawing' commands, these invoke work on the previously binded graphics
pipeline, at the same time, in order to invoke a draw command you must be within a render pass

The responsible of defining the scope of work is the render pass becuase this actually
manages the attachments (resources/image views throgh framebuffers) and how they are used,
the pipeline does not manages this because it only describes how the rendering is done,
not when (render pass) or what (framebuffers) resources

=> final version
The render pass defines the scope of work bevause it controls how attachments are used through
framebuffers. The pipeline only defines how the rendering is performed,
not when it happens(render pass) or what resources it uses (framebuffers)

