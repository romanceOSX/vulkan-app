Render pass vs Pipeline

Render pass
    Defines the structure of rendering
    How the rendering will interact with framebuffers
    Rendering sesison
    It can be thought of as the 'rendering infrastructure'

    Defines the set of image resources

Render pipeline
    It uses the render pass (the infrastructure) to do the actual rendering
    It describes how something is rendered

Framebuffer
    A collection of image views and a set of dimensions
    In conjuction with a render pass, they define the inputs and outputs used
    by drawing commands

Render pass
    An object that represents a set of framebuffer attachments and phases of rendering
    using those targets


States
    These refer to the configuration settings that define how
        - rendering
        - computation
        - resource usage
    behave

    Pipeline states
        These define Fixed-function behaviour
    
    Static vs Dynamic states
        Static are set during the pipeline creation
        Dynamics are through commands

Workflow
    Whenever we create an object, the driver turns this into GPU specific code and
    makes the GPU create such device, fixed states are declared during this creation
    The GPU then sends a reference back to the program, and that is the thing we
    manipulate

    Dynamic states in the other hand can be used through command buffer commands
    Though you must tell vulkan that some states will be dynamic by the use of 
    VkPipelineDynamicStateInfo
    The VkCmdSet* family of commnads trigger these dynamic states

Host side vs Device side commands
    How do I know which API calls trigger a representation in the GPU?
    vkCreate* commands do this
    The commands that take a VkDevice as a paramter
    The ones that return a handler
    The ones that allocate memory for something GPU-specific


