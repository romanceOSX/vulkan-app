Pipeline basics
--> https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/02_Graphics_pipeline_basics/00_Introduction.html

    - Vertex Input
    - Input Assembly
    - Rasterizer
        Takes the geometry shaped by the vertices from the vertex shader and turns
        it into fragments to be colored by the fragment shader
        Also performs: 
            - depth testing
            - face culling
            - scissor test
    - Multisampling
        One of the ways to perform 'anti-aliasing'
        Works by combining the fragment shader resutls of multiple polygons that
        rasterize the same pixel, mainly occurs along edges
    - Depth and stencil testing
    - Color Blending
        After the fragment shader returns a color, it needs to be combined with
        the color that is already in the framebuffer, this is known as 'color blending'
        There are two ways to do it:
            - Mix the old and new value to produce a final color
            - combine the old and new through a bitwise operation
    - Pipeline layout
        
Render Passes
    --> https://docs.vulkan.org/tutorial/latest/03_Drawing_a_triangle/02_Graphics_pipeline_basics/03_Render_passes.html
    We need to tell the pipeline the following:
        - How many color and depth buffers there will be
        - how many samples to use for each of them
        - how their contents should be handled throughout the rendering operations
    For this we do a 'render pass object'

What are pipeline states?
    A Pipeline has 'rendering stages' and 'states'
    A Vk pipeline is a collection of stages and states
    The term 'pipeline state', or the 'state', refers to the overall 'state', being
    configuration, paramters, etc... that describe the pipeline as a whole, you can
    think of this state term in the mathematical sense.
    The 'states' refer to the settings that determine the behaviour of such 'rendernig stages'
    Other names for 'pipeline states' would be 'pipeline settings' or 'pipeline parameters'

Summary
    - Shader stages
        shader modules define functionallity of the programmable stages of the pipeline
    - Fixed-function state
        All structures that defined the FFS's of the pipeline
    - Pipeline layout
        Uniform and push values referenced by the shader that can be updated at draw time
    - Render pass
        The attachments referenced by the pipeline stages and their usage

Rasterizer
    --> https://docs.vulkan.org/spec/latest/chapters/primsrast.html
    The framebuffer has a grid
    This stage determines which squares of such grid are occupied by the primitive
    It assigns depth value to each of the squares

    What is a fragment?
        The (x,y) data of the framebuffer, plus its depth information (z), plus any associated
        data declared by the fragment shader is called a fragment

Pipeline stages vs Pipeline states
    They are not the same
    stage -> specific programmable or fixed-function part of the pipeline
    state -> a configuration that controls the behaviour of a stage or group of stages


