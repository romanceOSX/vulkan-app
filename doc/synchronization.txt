GPU asynch
    The GPU is an asynchronous beast, functions will return right away so we must
    manage the order of operations from the host side explicitely
        - acquiring the image from the swapchain
        - Commands that draw on that image
        - Present the image by returning it to the swapchain

    These are some of the common tasks we as devs have to manage explicitly
        - order of commands within a command buffer
        - order within command buffers
        - between CPU and GPU
        - swapchain operations (semaphores)
        - waiting for a frame to finish (fence)

    Semaphores
        They are used for queue-related ordering
        Binary
            We will only be using these
        Timeline
        Semaphores can be signaled upon finishing an operation,
        or waited on by an operation

    Fence
        It serves the same purpose as the semaphore but on the host-side
        It guarantees an order within the context of the host
    
    Submitting the commands
        When submitting the commands you must specify some semaphores, these semaphores
        signify what signals to wait in order to begin the EXECUTION, not what signals
        to wait in order to begin the submission, the latter is wrong, since the submission
        alreadt took place

Naive approach: wait for each frame to be finished presented by the gpu to the surface
                then start recording and submitting the next frame

    /* image acquire */
    We create fences and semaphores
    Fences are created with the 'signaled' state triggered

    host Wait for 'in_flight' fence to be singaled (it is)

    gpu Aquire next image and fire the 'image_semaphore' when ready

    Set the fence to unsignaled

    /* command buffer submission */
    host record command buffer

    gpu wait for 'image_semaphore'
    gpu signal 'render semaphore' when done
    gpu signal 'in_flight' fence when done
    host submit info

    /* present to surface */
    gpu wait for 'render semaphore' to be signaled

    VkQueueSubmit
        once this operation finishes, it resets the signaled state of the waiting synchronization
        primitives

Better approach: dont wait for each frame to be finished rendering, begin recording while the other
                 frame is being rendered instead
                 Note that this can be thought of as an advantage of vulkan, since we can let the
                 application define the number of concurrent processed frames.
                 
    Each frame should have its own
        - command buffer
        - set of semaphores
        - fence

    
Vulkan has some examples on this
    --> https://github.com/KhronosGroup/Vulkan-Docs/wiki/Synchronization-Examples#swapchain-image-acquire-and-present

