Naive approach: wait for each frame to be finished presented by the gpu to the surface
                then start recording and submitting the next frame

    /* image acquire */
    We create fences and semaphores
    Fences are created with the 'signaled' state triggered

    host Wait for 'in_flight' fence to be singaled (it is)

    gpu Aquire next image and fire the 'image_semaphore' when ready

    Set the fence to unsignaled

    /* command buffer submission */
    host record command buffer

    gpu wait for 'image_semaphore'
    gpu signal 'render semaphore' when done
    gpu signal 'in_flight' fence when done
    host submit info

    /* present to surface */
    gpu wait for 'render semaphore' to be signaled

    VkQueueSubmit
        once this operation finishes, it resets the signaled state of the waiting synchronization
        primitives

Better approach: dont wait for each frame to be finished rendering, begin recording while the other
                 frame is being rendered instead
                 Note that this can be thought of as an advantage of vulkan, since we can let the
                 application define the number of concurrent processed frames.
                 
    Each frame should have its own
        - command buffer
        - set of semaphores
        - fence

    
